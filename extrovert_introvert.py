# -*- coding: utf-8 -*-
"""Extrovert-Introvert

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-VEYkZPyOMjUR0wIX0qZwK43Jsltu-oP

# ***Exploratory Data Analysis (EDA)***

## Importing all libraries for EDA
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline

"""Uploading and reading dataset"""

from google.colab import files

uploaded = files.upload()
filename = list(uploaded.keys())[0]

df = pd.read_csv(filename)
df.head()

"""Getting shape of dataset"""

df.shape

"""Getting names of columns"""

df.columns

"""## Getting statistical summary of dataset"""

df.describe()

"""## Summary of dataset"""

df.info()

"""Checking number of "null" values in dataset"""

df.isnull().sum()

"""Calculating number of duplicates in the dataset"""

df.duplicated().sum()

"""Dropping all the duplicates except the first value"""

df1 = df.drop_duplicates(keep='first')
df1.head()

"""Rechecking shape of dataset after dropping duplicates"""

df1.shape

"""Getting statistical data again after dropping duplicates"""

df1.describe()

"""## Reindexing the dataset as few duplicate data points are dropped"""

df1.index = range(1, len(df1) + 1)
df1.head()

"""## Defining "introverts" & "extroverts" dataframes from the modified dataframe"""

introverts = df1[df1['Personality']=='Introvert']
extroverts = df1[df1['Personality']=='Extrovert']

"""Defining many variables based on introverts"""

intro_friend_mean, intro_friend_median = introverts['Friends_circle_size'].mean(), introverts['Friends_circle_size'].median()
intro_out_mean, intro_out_median = introverts['Going_outside'].mean(), introverts['Going_outside'].median()
intro_event_mean, intro_event_median = introverts['Social_event_attendance'].mean(), introverts['Social_event_attendance'].median()
intro_post_mean, intro_post_median = introverts['Post_frequency'].mean(), introverts['Post_frequency'].median()
intro_alone_mean, intro_alone_median = introverts['Time_spent_Alone'].mean(), introverts['Time_spent_Alone'].median()

"""Defining many variables based on introverts"""

extro_friend_mean, extro_friend_median = extroverts['Friends_circle_size'].mean(), extroverts['Friends_circle_size'].median()
extro_out_mean, extro_out_median = extroverts['Going_outside'].mean(), extroverts['Going_outside'].median()
extro_event_mean, extro_event_median = extroverts['Social_event_attendance'].mean(), extroverts['Social_event_attendance'].median()
extro_post_mean, extro_post_median = extroverts['Post_frequency'].mean(), extroverts['Post_frequency'].median()
extro_alone_mean, extro_alone_median = extroverts['Time_spent_Alone'].mean(), extroverts['Time_spent_Alone'].median()

"""## Plotting a Pair Plot on modified dataframe with "Personality" as hue"""

sns.pairplot(data=df1, hue='Personality')
plt.show()

"""## Correlation Matrix of "introverts" only"""

sns.heatmap(introverts.corr(numeric_only=True), annot=True, cmap='coolwarm')
plt.show()

"""## Correlation matrix of "extroverts" only"""

sns.heatmap(extroverts.corr(numeric_only=True), annot=True, cmap='coolwarm')
plt.show()

"""# ***Machine Learning Code***

## Importing all required libraries for classification
"""

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix, balanced_accuracy_score

"""## Splitting dataset for test set"""

X = df1[['Time_spent_Alone', 'Social_event_attendance', 'Going_outside', 'Friends_circle_size', 'Post_frequency']]
Y = df1['Personality']

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

"""Predicting the dataset from the test set"""

lgr = LogisticRegression()
lgr.fit(X_train, Y_train)
import joblib
Y_pred = lgr.predict(X_test)
joblib.dump(lgr, "model.joblib")

"""## Getting a Confusion Matrix & classification report (precision, recall, f1-score)"""

confusion = confusion_matrix(Y_test, Y_pred)

classification = classification_report(Y_test, Y_pred)

print(confusion)
print(classification)

"""## Calculating Accuracy score on test set"""

balanced_accuracy_score(Y_test, Y_pred)

"""## Calculating Score on test set"""

lgr.score(X_test, Y_test)

coeff = list(lgr.coef_)
intercept = lgr.intercept_

print(f"Coefficient: {coeff}")
print(f"Intercept: {intercept}")

"""## Manual way to calculate the sigmoid function"""

def sigmoid(z) :
  sig = 1 / (1 + np.exp(-z))
  return sig

"""## Calculating Sigmoid function value by taking inputs from user. Also classifies into "introvert" or "extrovert"
"""

print("Input as : alone, event, outside, friends, post")

def calculate_z(inputs, coeff):
  z = 0
  for i in range(len(inputs)):
    z += inputs[i] * (coeff[0][i])

  z += intercept
  return z

alone, event, outside, friends, post = list(map(float, input().split()))
inputs = [alone, event, outside, friends, post]
sigmoid_value = sigmoid(calculate_z(inputs, coeff))

if sigmoid_value < 0.5 :
  print('Extrovert')
else :
  print('Introvert')

print(f"Sigmoid output for input: {sigmoid_value}")

app_code = """
import gradio as gr
import joblib
import numpy as np

model = joblib.load("model.joblib")

def predict_personality(openness, conscientiousness, extraversion, agreeableness, neuroticism):
    input_array = np.array([[openness, conscientiousness, extraversion, agreeableness, neuroticism]])
    prediction = model.predict(input_array)[0]
    label = "Extrovert" if prediction == 1 else "Introvert"
    return label

demo = gr.Interface(
    fn=predict_personality,
    inputs=[
        gr.Slider(0, 1, step=0.01, label="Openness"),
        gr.Slider(0, 1, step=0.01, label="Conscientiousness"),
        gr.Slider(0, 1, step=0.01, label="Extraversion"),
        gr.Slider(0, 1, step=0.01, label="Agreeableness"),
        gr.Slider(0, 1, step=0.01, label="Neuroticism")
    ],
    outputs=gr.Label(num_top_classes=2),
    title="Extrovert vs Introvert Classifier",
    description="Enter personality trait scores (0 to 1) to predict whether someone is more extroverted or introverted.",
    theme="default"
)

demo.launch()
"""

# Save it as app.py
with open("app.py", "w") as f:
    f.write(app_code)

with open("requirements.txt", "w") as f:
    f.write("gradio\nscikit-learn\nnumpy\njoblib")

import zipfile

with zipfile.ZipFile("extrovert_introvert_app.zip", "w") as zipf:
    zipf.write("model.joblib")
    zipf.write("app.py")
    zipf.write("requirements.txt")

from google.colab import files
files.download("extrovert_introvert_app.zip")

